<Project Sdk="Microsoft.NET.Sdk">

   <PropertyGroup>
      <TargetFrameworks>netstandard1.3;netstandard2.0;net451</TargetFrameworks>
   </PropertyGroup>

   <PropertyGroup>
      <CheckForOverflowUnderflow>True</CheckForOverflowUnderflow>
      <TreatWarningsAsErrors>True</TreatWarningsAsErrors>
      <TreatSpecificWarningsAsErrors />
      <LangVersion>latest</LangVersion>
   </PropertyGroup>

  <PropertyGroup>
    <MicrosoftConfigurationVersion Condition=" '$(TargetFramework)' == 'netstandard2.0' ">2.2.0</MicrosoftConfigurationVersion>
    <MicrosoftConfigurationVersion Condition=" '$(MicrosoftConfigurationVersion)' == '' ">1.1.2</MicrosoftConfigurationVersion>
  </PropertyGroup>

   <ItemGroup>
      <PackageReference Include="Microsoft.Extensions.Configuration.Binder" Version="$(MicrosoftConfigurationVersion)" />
      <PackageReference Include="Microsoft.Extensions.Configuration.Json" Version="$(MicrosoftConfigurationVersion)" />
   </ItemGroup>

   <ItemGroup>
      <ProjectReference Include="..\ResourcePooling.Async.Abstractions\ResourcePooling.Async.Abstractions.csproj" />
   </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net451' ">
    <Reference Include="System.IO" />
  </ItemGroup>

   <!-- Assembly information stuff -->
   <PropertyGroup>
      <VersionPrefix>1.0.0</VersionPrefix>
      <VersionSuffix></VersionSuffix>
      <AssemblyTitle>$(AssemblyName)</AssemblyTitle>
      <Description>Library API and implementation for situations when using pool factory of ResourcePooling.Async package with its parameter being serialized as JSON file on disk, or as a JSON string.</Description>
   </PropertyGroup>

   <!-- NuGet package stuff -->
   <PropertyGroup>
      <PackageId>$(AssemblyName)</PackageId>
      <PackageVersion>$(VersionPrefix)</PackageVersion>
      <PackageVersion Condition=" '$(VersionSuffix)' != ''">$(PackageVersion)-$(VersionSuffix)</PackageVersion>
      <PackageReleaseNotes>Initial release.</PackageReleaseNotes>
      <PackageTags>utility extensions dynamically load assembly resource pool async</PackageTags>
      <Title>Asynchronous Resource Pooling: Configuration-Based Dynamic Loading</Title>
   </PropertyGroup>

  <Import Project="$(CIPropsFilePath)" Condition=" '$(CIPropsFilePath)' != '' and Exists('$(CIPropsFilePath)') " />

</Project>